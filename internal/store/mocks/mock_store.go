// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/store.go

// Package mock_store is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "wallet/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// CheckExist mocks base method.
func (m *MockStorer) CheckExist(ctx context.Context, uuid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExist", ctx, uuid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExist indicates an expected call of CheckExist.
func (mr *MockStorerMockRecorder) CheckExist(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExist", reflect.TypeOf((*MockStorer)(nil).CheckExist), ctx, uuid)
}

// CloseConnectionDB mocks base method.
func (m *MockStorer) CloseConnectionDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnectionDB")
}

// CloseConnectionDB indicates an expected call of CloseConnectionDB.
func (mr *MockStorerMockRecorder) CloseConnectionDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnectionDB", reflect.TypeOf((*MockStorer)(nil).CloseConnectionDB))
}

// CreteWallet mocks base method.
func (m *MockStorer) CreteWallet(ctx context.Context, wallet models.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreteWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreteWallet indicates an expected call of CreteWallet.
func (mr *MockStorerMockRecorder) CreteWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreteWallet", reflect.TypeOf((*MockStorer)(nil).CreteWallet), ctx, wallet)
}

// Deposited mocks base method.
func (m *MockStorer) Deposited(ctx context.Context, wallet models.Wallet) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposited", ctx, wallet)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposited indicates an expected call of Deposited.
func (mr *MockStorerMockRecorder) Deposited(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposited", reflect.TypeOf((*MockStorer)(nil).Deposited), ctx, wallet)
}

// GetBalance mocks base method.
func (m *MockStorer) GetBalance(ctx context.Context, uuid string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, uuid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStorerMockRecorder) GetBalance(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStorer)(nil).GetBalance), ctx, uuid)
}
